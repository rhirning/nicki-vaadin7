
package org.mgnl.nicki.vaadin.base.components;

/*-
 * #%L
 * nicki-vaadin-base
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import org.mgnl.nicki.vaadin.base.command.Command;
import org.mgnl.nicki.vaadin.base.helper.UIHelper;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;

@SuppressWarnings("serial")
public class ConfirmDialog extends DialogBase {

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private Button confirmButton;

	@AutoGenerated
	private Button cancelButton;

	@AutoGenerated
	private Label headline;
	
	Command command;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	public ConfirmDialog(Command confirmCommand) {
		super(confirmCommand);
		this.command = confirmCommand;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		applyI18n();
		
		confirmButton.addClickListener(event -> {
				try {
					command.execute();
				} catch (Exception e) {
					Notification.show(command.getErrorText(),
							e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
				close();
			}
		);
		
		cancelButton.addClickListener(event -> close());
	}

	private void applyI18n() {
		headline.setValue(command.getHeadline());
		cancelButton.setCaption(command.getCancelCaption());
		confirmButton.setCaption(command.getConfirmCaption());
	}
		
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		
		// top-level component properties
		setWidth("320px");
		setHeight("160px");
		
		// headline
		headline = new Label();
		headline.setWidth("400px");
		headline.setHeight("-1px");
		headline.setValue("Headline");
		mainLayout.addComponent(headline, "top:20.0px;left:20.0px;");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1, "top:60.0px;left:20.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		cancelButton.setCaption("Cancel");
		UIHelper.setImmediate(cancelButton, true);
		horizontalLayout_1.addComponent(cancelButton);
		
		// confirmButton
		confirmButton = new Button();
		confirmButton.setWidth("-1px");
		confirmButton.setHeight("-1px");
		confirmButton.setCaption("Confirm");
		UIHelper.setImmediate(confirmButton, true);
		horizontalLayout_1.addComponent(confirmButton);
		
		return horizontalLayout_1;
	}
}
