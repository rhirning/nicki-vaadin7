
package org.mgnl.nicki.vaadin.base.components;

/*-
 * #%L
 * nicki-vaadin-base
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.vaadin.base.notification.Notification;
import org.mgnl.nicki.vaadin.base.notification.Notification.Type;

import com.vaadin.flow.component.Key;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;

@SuppressWarnings("serial")
public class EnterNameDialog extends DialogBase {

	
	private VerticalLayout mainLayout;

	
	private HorizontalLayout horizontalLayout_1;

	
	private Button closeButton;

	
	private Button createButton;

	
	private TextField name;

	
	private Label headline;
	
	private String i18nBase;

	EnterNameHandler handler;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	public EnterNameDialog(String messageBase, String title) {
		super(title);
		i18nBase = messageBase;
		buildMainLayout();
		add(mainLayout);

		name.focus();
		applyI18n(messageBase);
		
		createButton.addClickListener(event -> {
				try {
					getHandler().setName((String) name.getValue());
					close();
				} catch (Exception e) {
					Notification.show(I18n.getText(i18nBase + ".error"),
							e.getMessage(), Type.ERROR_MESSAGE);
				}
			}
		);
		
		closeButton.addClickListener(event -> close());
		
		createButton.addClickShortcut(Key.ENTER);
	}

	private void applyI18n(String messageBase) {
		headline.setText(I18n.getText(messageBase + ".headline"));
		createButton.setText(I18n.getText(messageBase + ".button.create"));
		closeButton.setText(I18n.getText(messageBase + ".button.close"));
	}
		
	public EnterNameHandler getHandler() {
		return handler;
	}
	
	public void setName(String name) {
		this.name.setValue(name);
	}

	public void setHandler(EnterNameHandler handler) {
		this.handler = handler;
		handler.setDialog(this);
		this.name.setValue(handler.getName());
	}

	
	private void buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setHeight("-1px");
		
		// headline
		headline = new Label();
		headline.setText("");
		mainLayout.add(headline);
		
		// name
		name = new TextField();
		mainLayout.add(name);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.add(horizontalLayout_1);
		
	}

	
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// createButton
		createButton = new Button();
		createButton.setWidth("-1px");
		createButton.setHeight("-1px");
		createButton.setText("Create");
		horizontalLayout_1.add(createButton);
		
		// closeButton
		closeButton = new Button();
		closeButton.setWidth("-1px");
		closeButton.setHeight("-1px");
		closeButton.setText("Close");
		horizontalLayout_1.add(closeButton);
		
		return horizontalLayout_1;
	}
}
