
package org.mgnl.nicki.shop.renderer;

/*-
 * #%L
 * nicki-shop
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.shop.base.objects.CatalogValueProvider;
import org.mgnl.nicki.shop.base.objects.MultipleInstancesCatalogArticle;
import org.mgnl.nicki.vaadin.base.components.DialogBase;
import org.mgnl.nicki.vaadin.base.helper.UIHelper;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.ui.AbstractSelect.NewItemHandler;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@SuppressWarnings("serial")
public class EnterSpecifierAsSelectDialog extends DialogBase implements NewItemHandler {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private Button closeButton;

	@AutoGenerated
	private Button createButton;

	@AutoGenerated
	private ComboBox name;

	@AutoGenerated
	private Label headline;

	private String i18nBase;

	private CreateInstanceHandler handler;
	
	private CatalogValueProvider provider;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	public EnterSpecifierAsSelectDialog(String messageBase, String title) {
		super(title);
		i18nBase = messageBase;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		name.focus();
		applyI18n(messageBase);
		
		createButton.addClickListener(event -> {
				try {
					String value = (String) name.getValue();
					if (!provider.checkEntry(value)) {
						Notification.show(I18n.getText(i18nBase + ".error"));
					} else {
						getHandler().setName(value);
						close();
					}
				} catch (Exception e) {
					log.error("Error", e);
					Notification.show(I18n.getText(i18nBase + ".error"),
							e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
		});
		
		closeButton.addClickListener(event -> close());
		
		createButton.setClickShortcut(KeyCode.ENTER);
	}
	
	public void init(MultipleInstancesCatalogArticle catalogArticle) {
		provider = catalogArticle.getCatalogValueProvider();
		for (String value : provider.getEntries().keySet()) {
			Item item = name.addItem(value);
			name.setItemCaption(item, provider.getEntries().get(value));
		}
		if (provider.isOnlyDefinedEntries()) {
			name.setNewItemsAllowed(false);
		} else {
			name.setNewItemsAllowed(true);
			name.setNewItemHandler(this);
		}
	}

	private void applyI18n(String messageBase) {
		headline.setValue(I18n.getText(messageBase + ".headline"));
		createButton.setCaption(I18n.getText(messageBase + ".button.create"));
		closeButton.setCaption(I18n.getText(messageBase + ".button.close"));
	}
		
	public CreateInstanceHandler getHandler() {
		return handler;
	}
	
	public void setName(String name) {
		this.name.addItem(name);
		this.name.setValue(name);
	}

	public void setHandler(CreateInstanceHandler handler) {
		this.handler = handler;
//		handler.setDialog(this);
	}

	public void addNewItem(String newItemCaption) {
        if (!name.containsId(newItemCaption)) {
        	name.addItem(newItemCaption);
        	name.setValue(newItemCaption);
        }
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// headline
		headline = new Label();
		headline.setWidth("400px");
		headline.setHeight("-1px");
		headline.setValue("Headline");
		mainLayout.addComponent(headline);
		
		// name
		name = new ComboBox();
		UIHelper.setImmediate(name, true);
		name.setWidth("200px");
		name.setHeight("-1px");
		mainLayout.addComponent(name);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// createButton
		createButton = new Button();
		createButton.setCaption("Create");
		UIHelper.setImmediate(createButton, true);
		createButton.setWidth("-1px");
		createButton.setHeight("-1px");
		horizontalLayout_1.addComponent(createButton);
		
		// closeButton
		closeButton = new Button();
		closeButton.setCaption("Close");
		UIHelper.setImmediate(closeButton, true);
		closeButton.setWidth("-1px");
		closeButton.setHeight("-1px");
		horizontalLayout_1.addComponent(closeButton);
		
		return horizontalLayout_1;
	}
}
