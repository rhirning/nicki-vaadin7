
package org.mgnl.nicki.editor.jcr;

/*-
 * #%L
 * nicki-editor-jcr
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import org.mgnl.nicki.editor.jcr.PropertyWrapper.PROPERTY_TYPE;
import org.mgnl.nicki.vaadin.base.helper.UIHelper;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class PropertyEditor extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button createButton;
	@AutoGenerated
	private TextArea value;
	@AutoGenerated
	private NativeSelect type;
	@AutoGenerated
	private TextField name;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = -3564526809483368959L;
	private NodeViewer nodeViewer;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param nodeViewer 
	 */
	public PropertyEditor(NodeViewer viewer, PropertyWrapper propertyWrapper) {
		this.nodeViewer = viewer;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		addOptions();
		if (propertyWrapper != null) {
			this.name.setValue(propertyWrapper.getName());
			this.type.select(propertyWrapper.getType());
			this.value.setValue(propertyWrapper.getValue());
			this.name.setEnabled(false);
			this.type.setEnabled(false);
		} else {
			this.name.setEnabled(true);
			this.type.setEnabled(true);
		}
		
		this.createButton.addClickListener(event -> nodeViewer.create((String) name.getValue(), (PROPERTY_TYPE)type.getValue(), (String) value.getValue()));
	}

	private void addOptions() {
		for (PROPERTY_TYPE pType : PROPERTY_TYPE.values()) {
			type.addItem(pType);
		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setWidth("480px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("480px");
		setHeight("-1px");
		
		// name
		name = new TextField();
		name.setCaption("Name");
		name.setWidth("-1px");
		name.setHeight("-1px");
		mainLayout.addComponent(name);
		
		// type
		type = new NativeSelect();
		type.setCaption("Typ");
		type.setWidth("-1px");
		type.setHeight("-1px");
		mainLayout.addComponent(type);
		
		// value
		value = new TextArea();
		value.setCaption("Wert");
		value.setWidth("400px");
		value.setHeight("200px");
		mainLayout.addComponent(value);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(true);
		horizontalLayout_1.setSpacing(true);
		
		// createButton
		createButton = new Button();
		createButton.setCaption("Anlegen");
		UIHelper.setImmediate(createButton, true);
		createButton.setWidth("-1px");
		createButton.setHeight("-1px");
		horizontalLayout_1.addComponent(createButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Abbrechen");
		UIHelper.setImmediate(cancelButton, true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		horizontalLayout_1.addComponent(cancelButton);
		
		return horizontalLayout_1;
	}

}
