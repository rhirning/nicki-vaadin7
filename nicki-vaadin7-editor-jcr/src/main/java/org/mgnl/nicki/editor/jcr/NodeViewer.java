
package org.mgnl.nicki.editor.jcr;

/*-
 * #%L
 * nicki-editor-jcr
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import javax.jcr.Property;
import javax.jcr.PropertyIterator;
import javax.jcr.RepositoryException;
import javax.naming.NamingException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.mgnl.nicki.core.data.TreeData;
import org.mgnl.nicki.core.objects.DynamicObjectException;
import org.mgnl.nicki.editor.jcr.PropertyWrapper.PROPERTY_TYPE;
import org.mgnl.nicki.jcr.objects.JcrDynamicObject;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.Action;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@SuppressWarnings("serial")
public class NodeViewer extends CustomComponent implements ClassEditor {
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Button saveButton;

	@AutoGenerated
	private Table table;

	static final Action ACTION_NEW = new Action("New");
    static final Action ACTION_EDIT = new Action("Edit");
    static final Action[] ACTIONS_NEW = new Action[] { ACTION_NEW };
    static final Action[] ACTIONS_EDIT = new Action[] { ACTION_EDIT };


	private Window editor;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JcrDynamicObject node;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public NodeViewer() {
	}

	public void setDynamicObject(NickiTreeEditor nickiEditor,
			TreeData dynamicObject) {
		this.node = (JcrDynamicObject) dynamicObject;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initTable();
		table.setSelectable(true);

		table.addActionHandler(new Action.Handler() {
			
			@Override
			public void handleAction(Action action, Object sender, Object target) {
				if (ACTION_NEW == action) {
					addProperty();
	            } else if (ACTION_EDIT == action) {
	                editProperty(target);
	            }
			
			}
			
			@Override
			public Action[] getActions(Object target, Object sender) {
				if (target != null) {
					return ACTIONS_EDIT;
				} else {
					return ACTIONS_NEW;
				}
			}
		});

		saveButton.addClickListener(event -> {
				try {
					save();
				} catch (Exception e) {
					log.error("Error", e);
				}
		});

	}
	


	private void initTable() {
		try {
			//properties.setContainerDataSource(new NodeContainer(node));
			table.setContainerDataSource(getBeanItems(this.node));
		} catch (RepositoryException e) {
			log.error("Error", e);
		}
	}

	protected void editProperty(Object target) {
		editor = null;
		editor = new Window("New Property", new PropertyEditor(this, (PropertyWrapper) target)); 
		editor.setModal(true);
		UI.getCurrent().addWindow(editor);
	}

	protected void addProperty() {
		
		editor = null;
		editor = new Window("New Property", new PropertyEditor(this, null)); 
		editor.setModal(true);
		UI.getCurrent().addWindow(editor);
		
	}

	private Container getBeanItems(JcrDynamicObject dynamicObject) throws RepositoryException {
	    // Create a container for such beans
	    BeanItemContainer<PropertyWrapper> properties =
	        new BeanItemContainer<PropertyWrapper>(PropertyWrapper.class);
	    
	    for (PropertyIterator iterator = dynamicObject.getNode().getProperties(); iterator.hasNext();) {
	    	Property entry = (Property) iterator.next();
	    	properties.addBean(new PropertyWrapper(entry));
		}
		return properties;
	}

	public void save() throws DynamicObjectException, NamingException {
		this.node.update();
	}

	public HttpServletRequest getRequest() {
		return request;
	}

	public void setRequest(HttpServletRequest request) {
		this.request = request;
	}

	public HttpServletResponse getResponse() {
		return response;
	}

	public void setResponse(HttpServletResponse response) {
		this.response = response;
	}

	public void create(String name, PROPERTY_TYPE type, String value) {
		try {
			type.setProperty(this.node.getNode(), name, value);
			initTable();
			editor.close();
			editor = null;
		} catch (Exception e) {
			log.error("Error", e);
		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("-1px");
		mainLayout.addComponent(table);
		
		// saveButton
		saveButton = new Button();
		saveButton.setCaption("Save");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		mainLayout.addComponent(saveButton);
		
		return mainLayout;
	}

}
