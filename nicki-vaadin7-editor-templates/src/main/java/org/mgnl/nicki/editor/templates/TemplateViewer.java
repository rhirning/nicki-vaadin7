
package org.mgnl.nicki.editor.templates;

/*-
 * #%L
 * nicki-editor-templates
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import javax.naming.NamingException;

import org.mgnl.nicki.core.data.TreeData;
import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.core.objects.DynamicObjectException;
import org.mgnl.nicki.dynamic.objects.objects.Template;
import org.mgnl.nicki.vaadin.base.components.DialogBase;
import org.mgnl.nicki.vaadin.base.components.NickiTabSheet;
import org.mgnl.nicki.vaadin.base.components.SimpleEditor;
import org.mgnl.nicki.vaadin.base.components.SimplePropertyEditor;
import org.mgnl.nicki.vaadin.base.components.TestDataView;
import org.mgnl.nicki.vaadin.base.data.AttributeDataContainer;
import org.mgnl.nicki.vaadin.base.data.ListPartDataContainer;
import org.mgnl.nicki.vaadin.base.data.PartDataContainer;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;

import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@SuppressWarnings("serial")
public class TemplateViewer extends VerticalLayout implements ClassEditor {
	
	private NickiTabSheet tab;
	private Template template;
	private Button saveButton;
	private Button executeButton;
	private NickiTreeEditor editor;
	private Dialog previewWindow;	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TemplateViewer() {
	}
	
	public void setDynamicObject(NickiTreeEditor nickiEditor, TreeData dynamicObject) {
		this.editor = nickiEditor;
		this.template = (Template) dynamicObject;
		buildEditor();
		setSizeFull();
		initI18n();
		
		createSheets();
		
		saveButton.addClickListener(event -> {
				try {
					save();
				} catch (Exception e) {
					log.error("Error", e);
				}
		});
		executeButton.addClickListener(event -> {
				try {
					execute();
				} catch (Exception e) {
					log.error("Error", e);
				}
		});
		
	}
	
	private void initI18n() {
		saveButton.setText(I18n.getText(editor.getMessageKeyBase() + ".button.save"));
		executeButton.setText(I18n.getText(editor.getMessageKeyBase() + ".button.execute"));
	}

	protected void execute() throws DynamicObjectException, NamingException {
		save();
		TemplateConfig configDialog = new TemplateConfig();
		configDialog.setDynamicObject(editor, template);
		previewWindow = new DialogBase(I18n.getText(editor.getMessageKeyBase() + ".config.window.title"), configDialog);
		previewWindow.setModal(true);
		previewWindow.setWidth("" + (configDialog.getWidth() + 80) + "px");
		previewWindow.setHeight("" + (configDialog.getHeight() + 120) + "px");
		previewWindow.open();
	}

	private void createSheets() {
		tab.addTab(new SimpleEditor(new AttributeDataContainer<String>(template, "data")), I18n.getText(editor.getMessageKeyBase() +".tab.data"), null);
		tab.addTab(new SimpleEditor(new PartDataContainer(template, Template.ATTRIBUTE_PARTS, "pdf", "=")), I18n.getText(editor.getMessageKeyBase() +".tab.pdf"), null);
//		tab.addTab(new SimpleEditor(new PartDataContainer(template, Template.ATTRIBUTE_PARTS, "xls", "=")), I18n.getText(editor.getMessageKeyBase() +".tab.xls"), null);
		tab.addTab(new ExcelEditor(editor.getMessageKeyBase() + ".excel", template), I18n.getText(editor.getMessageKeyBase() +".tab.xls"), null);
		tab.addTab(new SimplePropertyEditor(new AttributeDataContainer<String>(template, "handler")), I18n.getText(editor.getMessageKeyBase() +".tab.handler"), null);
		tab.addTab(new TestDataView(new ListPartDataContainer(template, "testData", "="), editor.getMessageKeyBase()),
				I18n.getText(editor.getMessageKeyBase() +".tab.testdata"), null);
		tab.addTab(new SimpleEditor(new AttributeDataContainer<String>(template, "params")), I18n.getText(editor.getMessageKeyBase() +".tab.params"), null);
		if (template.hasPart("subject")) {
			tab.addTab(new SimpleEditor(new PartDataContainer(template, Template.ATTRIBUTE_PARTS, "subject", "=")), "subject", null);
		}
		if (template.hasPart("body")) {
			tab.addTab(new SimpleEditor(new PartDataContainer(template, Template.ATTRIBUTE_PARTS, "body", "=")), "body", null);
		}
	}
	
	private void buildEditor() {
		setSizeFull();
		removeAll();
		
		tab = new NickiTabSheet();
		tab.setSizeFull();
		add(tab);
		setFlexGrow(1, tab);
		setSpacing(false);
		setMargin(false);

		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setSpacing(true);
		horizontalLayout.setHeight("40px");
		add(horizontalLayout);
		saveButton = new Button();
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		saveButton.setText("Speichern");
		horizontalLayout.add(saveButton);
		
		executeButton = new Button();
		executeButton.setWidth("-1px");
		executeButton.setHeight("-1px");
		executeButton.setText("Execute");
		horizontalLayout.add(executeButton);
	}

	public NickiTabSheet getTab() {
		return tab;
	}


	public void save() throws DynamicObjectException, NamingException {
		if (template.isComplete() && !template.isNew()) {
			template.update();
		}
	}
	
}
