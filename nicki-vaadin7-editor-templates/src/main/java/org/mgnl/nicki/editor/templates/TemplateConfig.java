
package org.mgnl.nicki.editor.templates;

/*-
 * #%L
 * nicki-editor-templates
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */



import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.NamingException;

import org.apache.commons.lang.StringUtils;
import org.mgnl.nicki.core.data.TreeData;
import org.mgnl.nicki.core.helper.DataHelper;
import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.core.objects.DynamicObjectException;
import org.mgnl.nicki.dynamic.objects.objects.Template;
import org.mgnl.nicki.template.engine.TemplateParameter;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;
import org.mgnl.nicki.vaadin.base.io.StreamSource;
import org.mgnl.nicki.vaadin.base.notification.Notification;

import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.html.Anchor;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.server.StreamResource;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@SuppressWarnings("serial")
public class TemplateConfig extends VerticalLayout implements ClassEditor {
	public static final String DIALOG_WIDTH = ".dialogWidth";
	public static final String DIALOG_HEIGHT = ".dialogHeight";
	private Component configDialog;
	private Template template;
	private Button previewButton;
	private Button htmlPreviewButton;
	/*
	private Link csvLink;
	private Link pdfLink;
	private Link xlsLink;
	 */
	private Anchor csvAnchor;
	private Anchor pdfAnchor;
	private Anchor xlsAnchor;
	private boolean usePreview = true;
	private NickiTreeEditor editor;
	private Map<String, Object> params = new HashMap<String, Object>();


	public TemplateConfig() {
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	@Override
	public void setDynamicObject(NickiTreeEditor nickiEditor, TreeData dynamicObject) {
		this.editor = nickiEditor;
		this.template = (Template) dynamicObject;
		params = new HashMap<String, Object>();
		buildEditor();
		initI18n();

		if (usePreview) {
			previewButton.addClickListener(event -> {
					try {
						preview();
					} catch (Exception e) {
						log.error("Error", e);
					}
			});
		}

		htmlPreviewButton.addClickListener(event -> {
				try {
					htmlPreview();
				} catch (Exception e) {
					log.error("Error", e);
				}
		});

		/* alte Methode mit Link
		//pdfLink.setCaption("PDF");
		pdfLink.setTargetName("_blank");
		StreamSource pdfStreamSource;
		if (template.hasPart("pdf")) {
			pdfStreamSource = new PdfStreamSource2(template, template.getContext(), params);
		} else {
			pdfStreamSource = new PdfStreamSource(template, template.getContext(), params);
		}
		pdfLink.setResource(new LinkResource(pdfStreamSource, template.getName() + ".pdf",
				"application/pdf"));

		if (template.hasPart("xls")) {
			//xlsLink.setCaption("XLS");
			xlsLink.setTargetName("_blank");

			StreamSource xlsStreamSource = new XlsStreamSource(template, template.getContext(), params);;
			xlsLink.setResource(new LinkResource(xlsStreamSource, template.getName() + ".xls",
					"application/vnd.ms-excel"));
		}

		//csvLink.setCaption("CSV");
		csvLink.setTargetName("_blank");
		StreamSource csvStreamSource;
		if (template.hasPart("pdf")) {
			csvStreamSource = new CsvStreamSource2(template, template.getContext(), params);
		} else {
			csvStreamSource = new CsvStreamSource(template, template.getContext(), params);
		}
		csvLink.setResource(new LinkResource(csvStreamSource, template.getName() + ".csv",
				"text/comma-separated-values"));

		 */

		paramsChanged();
	}

	private void initI18n() {
		previewButton.setText(I18n.getText(editor.getMessageKeyBase() + ".config.button.preview"));
		htmlPreviewButton.setText(I18n.getText(editor.getMessageKeyBase() + ".config.button.htmlpreview"));
		/*
		pdfLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.pdf"));
		csvLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.csv"));
		xlsLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.xls"));
		 */
		pdfAnchor.setText(I18n.getText(editor.getMessageKeyBase() + ".config.link.pdf"));
		csvAnchor.setText(I18n.getText(editor.getMessageKeyBase() + ".config.link.csv"));
		xlsAnchor.setText(I18n.getText(editor.getMessageKeyBase() + ".config.link.xls"));
	}

	protected void close() {
	}

	protected void preview() throws DynamicObjectException, NamingException {
		if (isComplete()) {
			PreviewTemplate preview = new PreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
			preview.execute(template);
		}
	}


	protected void htmlPreview() throws DynamicObjectException, NamingException {
		if (isComplete()) {
			HtmlPreviewTemplate preview = new HtmlPreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
			preview.execute(template);
		}
	}

	protected StreamResource createCSVStream() {
		return new StreamResource(template != null ? template.getName() + "_" + DataHelper.getTime(new Date()) + ".csv" : "template.csv",
				() -> {
				StreamSource csvStreamSource = null;
				if (isComplete()) {
					if (template.hasPart("pdf")) {
						csvStreamSource = new CsvStreamSource2(template, template.getContext(), params);
					} else {
						csvStreamSource = new CsvStreamSource(template, template.getContext(), params);
					}
				}
				if (csvStreamSource != null) {
					return csvStreamSource.getStream();
				} else {
					return null;
				}
		});
	}

	@SuppressWarnings("deprecation")
	@Deprecated
	protected StreamResource createXLSStream() {
		return new StreamResource(template != null ? template.getName() + "_" + DataHelper.getTime(new Date()) + ".xls" : "template.xls", () -> {
				StreamSource xlsStreamSource = null;
				if (isComplete() && template.hasPart("xls")) {
					xlsStreamSource = new XlsStreamSource(template, template.getContext(), params);
				}
				if (xlsStreamSource != null) {
					return xlsStreamSource.getStream();
				} else {
					return null;
				}
		});
	}

	protected StreamResource createXLSXStream() {
		return new StreamResource(template != null ? template.getName() + "_" + DataHelper.getTime(new Date()) + ".xlsX" : "template.xls",
				() -> {
				StreamSource xlsStreamSource = null;
				if (isComplete() && template.hasPart("xls")) {
					xlsStreamSource = new XlsxStreamSource(template, template.getContext(), params);
				}
				if (xlsStreamSource != null) {
					return xlsStreamSource.getStream();
				} else {
					return null;
				}
		});
	}

	protected StreamResource createPDFStream() {
		return new StreamResource(template != null ? template.getName() + "_" + DataHelper.getTime(new Date()) + ".pdf" : "template.pdf",
				()-> {
				StreamSource pdfStreamSource = null;
				if (isComplete()) {
					if (template.hasPart("pdf")) {
						pdfStreamSource = new PdfStreamSource2(template, template.getContext(), params);
					}
				}
				if (pdfStreamSource != null) {
					return pdfStreamSource.getStream();
				} else {
					return null;
				}
		});
	}

	protected boolean isComplete() {
		if (!GuiTemplateHelper.isComplete(template, params)) {
			Notification.show(I18n.getText(editor.getMessageKeyBase()+ ".error.params.incomplete"));
			return false;
		} else {
			return true;
		}

	}

	private void buildEditor() {
		setMargin(true);
		setSpacing(true);
		setHeight("-1px");
		setWidth("100%");

		GuiTemplateHandler handler = GuiTemplateHelper.getGuiTemplateHandler(template);
		configDialog = handler.getConfigDialog(template, params, this);
		List<TemplateParameter> templateParams = handler.getTemplateParameters();
		String width  = getTemplateParameter(templateParams, DIALOG_WIDTH, "800px");
		String height = getTemplateParameter(templateParams, DIALOG_HEIGHT, "400px");
		
		setHeight(height);
		setWidth(width);
		// TODO: component.setWith, component.setHeight
//		configDialog.setWidth("100%");
//
//		configDialog.setHeight("100%");

		add(configDialog);

		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setSpacing(true);
		horizontalLayout.setHeight("40px");

		previewButton = new Button();
		previewButton.setWidth("-1px");
		previewButton.setHeight("-1px");
		previewButton.setText("Vorschau");
		if (usePreview) {
			horizontalLayout.add(previewButton);
		}
		htmlPreviewButton = new Button();
		htmlPreviewButton.setWidth("-1px");
		htmlPreviewButton.setHeight("-1px");
		htmlPreviewButton.setText("HTML Vorschau");
		horizontalLayout.add(htmlPreviewButton);

		/*
		pdfLink = new Link();
		horizontalLayout.addComponent(pdfLink);

		csvLink = new Link();
		horizontalLayout.addComponent(csvLink);

		xlsLink = new Link();
		horizontalLayout.addComponent(xlsLink);
		 */

		csvAnchor = new Anchor();
		csvAnchor.setWidth("-1px");
		csvAnchor.setHeight("-1px");
		csvAnchor.setText("CSV");
		horizontalLayout.add(csvAnchor);

		xlsAnchor = new Anchor();
		xlsAnchor.setWidth("-1px");
		xlsAnchor.setHeight("-1px");
		xlsAnchor.setText("XLS");
		horizontalLayout.add(xlsAnchor);

		pdfAnchor = new Anchor();
		pdfAnchor.setWidth("-1px");
		pdfAnchor.setHeight("-1px");
		pdfAnchor.setText("PDF");
		horizontalLayout.add(pdfAnchor);

		add(horizontalLayout);
	}

	private String getTemplateParameter(List<TemplateParameter> templateParams,
			String name, String defaultValue) {
		for (TemplateParameter templateParameter : templateParams) {
			if (StringUtils.equals(templateParameter.getName(), name)) {
				return templateParameter.getValue();
			}
		}
		return defaultValue;
	}

	public void paramsChanged() {
		if (GuiTemplateHelper.isComplete(template, params)) {
			StreamResource pdfSource = createPDFStream();
			pdfAnchor.setHref(pdfSource);
			pdfAnchor.setEnabled(true);

			StreamResource csvSource = createCSVStream();
			csvAnchor.setHref(csvSource);
			csvAnchor.setEnabled(true);
			if (template.hasPart("xls")) {
				StreamResource xlsSource = createXLSStream();
				xlsAnchor.setHref(xlsSource);
				xlsAnchor.setEnabled(true);
			}
		} else {
			//pdfLink.setEnabled(false);
			pdfAnchor.setEnabled(false);
			//csvLink.setEnabled(false);
			csvAnchor.setEnabled(false);
			//xlsLink.setEnabled(false);
			xlsAnchor.setEnabled(false);
		}
	}

	@Override
	public void save() {
	}

	public boolean isUsePreview() {
		return usePreview;
	}

	public void setUsePreview(boolean usePreview) {
		this.usePreview = usePreview;
	}

}
