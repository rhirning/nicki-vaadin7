
package org.mgnl.nicki.editor.templates;

/*-
 * #%L
 * nicki-editor-templates
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */



import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.NamingException;

import org.apache.commons.lang.StringUtils;
import org.mgnl.nicki.core.data.TreeData;
import org.mgnl.nicki.core.helper.DataHelper;
import org.mgnl.nicki.core.i18n.I18n;
import org.mgnl.nicki.core.objects.DynamicObjectException;
import org.mgnl.nicki.dynamic.objects.objects.Template;
import org.mgnl.nicki.template.engine.TemplateParameter;
import org.mgnl.nicki.vaadin.base.editor.ClassEditor;
import org.mgnl.nicki.vaadin.base.editor.NickiTreeEditor;

import com.vaadin.server.FileDownloader;
import com.vaadin.server.StreamResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@SuppressWarnings("serial")
public class TemplateConfig extends CustomComponent implements ClassEditor {
	public static final String DIALOG_WIDTH = ".dialogWidth";
	public static final String DIALOG_HEIGHT = ".dialogHeight";

	private VerticalLayout mainLayout;

	private Component configDialog;
	private Template template;
	private Button previewButton;
	private Button htmlPreviewButton;
	/*
	private Link csvLink;
	private Link pdfLink;
	private Link xlsLink;
	 */
	private Button csvButton;
	private Button pdfButton;
	private Button xlsButton;
	private FileDownloader csvFileDownloader;
	private FileDownloader pdfFileDownloader;
	private FileDownloader xlsFileDownloader;
	private boolean usePreview = true;
	private NickiTreeEditor editor;
	private Map<String, Object> params = new HashMap<String, Object>();


	public TemplateConfig() {
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	@Override
	public void setDynamicObject(NickiTreeEditor nickiEditor, TreeData dynamicObject) {
		this.editor = nickiEditor;
		this.template = (Template) dynamicObject;
		csvFileDownloader = null;
		pdfFileDownloader = null;
		xlsFileDownloader = null;
		params = new HashMap<String, Object>();
		buildEditor();
		setCompositionRoot(mainLayout);
		initI18n();

		if (usePreview) {
			previewButton.addClickListener(event -> {
					try {
						preview();
					} catch (Exception e) {
						log.error("Error", e);
					}
			});
		}

		htmlPreviewButton.addClickListener(event -> {
				try {
					htmlPreview();
				} catch (Exception e) {
					log.error("Error", e);
				}
		});

		/* alte Methode mit Link
		//pdfLink.setCaption("PDF");
		pdfLink.setTargetName("_blank");
		StreamSource pdfStreamSource;
		if (template.hasPart("pdf")) {
			pdfStreamSource = new PdfStreamSource2(template, template.getContext(), params);
		} else {
			pdfStreamSource = new PdfStreamSource(template, template.getContext(), params);
		}
		pdfLink.setResource(new LinkResource(pdfStreamSource, template.getName() + ".pdf",
				"application/pdf"));

		if (template.hasPart("xls")) {
			//xlsLink.setCaption("XLS");
			xlsLink.setTargetName("_blank");

			StreamSource xlsStreamSource = new XlsStreamSource(template, template.getContext(), params);;
			xlsLink.setResource(new LinkResource(xlsStreamSource, template.getName() + ".xls",
					"application/vnd.ms-excel"));
		}

		//csvLink.setCaption("CSV");
		csvLink.setTargetName("_blank");
		StreamSource csvStreamSource;
		if (template.hasPart("pdf")) {
			csvStreamSource = new CsvStreamSource2(template, template.getContext(), params);
		} else {
			csvStreamSource = new CsvStreamSource(template, template.getContext(), params);
		}
		csvLink.setResource(new LinkResource(csvStreamSource, template.getName() + ".csv",
				"text/comma-separated-values"));

		 */

		paramsChanged();
	}

	private void initI18n() {
		previewButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.button.preview"));
		htmlPreviewButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.button.htmlpreview"));
		/*
		pdfLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.pdf"));
		csvLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.csv"));
		xlsLink.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.xls"));
		 */
		pdfButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.pdf"));
		csvButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.csv"));
		xlsButton.setCaption(I18n.getText(editor.getMessageKeyBase() + ".config.link.xls"));
	}

	protected void close() {
	}

	protected void preview() throws DynamicObjectException, NamingException {
		if (isComplete()) {
			PreviewTemplate preview = new PreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
			preview.execute(template);
		}
	}


	protected void htmlPreview() throws DynamicObjectException, NamingException {
		if (isComplete()) {
			HtmlPreviewTemplate preview = new HtmlPreviewTemplate(editor.getNickiContext(), editor.getMessageKeyBase(), params);
			preview.execute(template);
		}
	}

	protected StreamResource createCSVStream() {
		return new StreamResource(() -> {
				StreamSource csvStreamSource = null;
				if (isComplete()) {
					if (template.hasPart("pdf")) {
						csvStreamSource = new CsvStreamSource2(template, template.getContext(), params);
					} else {
						csvStreamSource = new CsvStreamSource(template, template.getContext(), params);
					}
				}
				if (csvStreamSource != null) {
					return csvStreamSource.getStream();
				} else {
					return null;
				}
		}, template != null ? template.getName() + "_" + DataHelper.getTime(new Date()) + ".csv" : "template.csv");
	}

	protected StreamResource createXLSStream() {
		return new StreamResource(() -> {
				StreamSource xlsStreamSource = null;
				if (isComplete() && template.hasPart("xls")) {
					xlsStreamSource = new XlsStreamSource(template, template.getContext(), params);
				}
				if (xlsStreamSource != null) {
					return xlsStreamSource.getStream();
				} else {
					return null;
				}
		}, template != null ? template.getName() + "_" + DataHelper.getTime(new Date()) + ".xls" : "template.xls");
	}

	protected StreamResource createPDFStream() {
		return new StreamResource(()-> {
				StreamSource pdfStreamSource = null;
				if (isComplete()) {
					if (template.hasPart("pdf")) {
						pdfStreamSource = new PdfStreamSource2(template, template.getContext(), params);
					}
				}
				if (pdfStreamSource != null) {
					return pdfStreamSource.getStream();
				} else {
					return null;
				}
		}, template != null ? template.getName() + "_" + DataHelper.getTime(new Date()) + ".pdf" : "template.pdf");
	}

	protected boolean isComplete() {
		if (!GuiTemplateHelper.isComplete(template, params)) {
			Notification.show(I18n.getText(editor.getMessageKeyBase()+ ".error.params.incomplete"));
			return false;
		} else {
			return true;
		}

	}

	private VerticalLayout buildEditor() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setHeight("-1px");
		mainLayout.setWidth("100%");

		// top-level component properties
		// setWidth("100.0%");
		// setHeight("100.0%");

		GuiTemplateHandler handler = GuiTemplateHelper.getGuiTemplateHandler(template);
		configDialog = handler.getConfigDialog(template, params, this);
		List<TemplateParameter> templateParams = handler.getTemplateParameters();
		String width  = getTemplateParameter(templateParams, DIALOG_WIDTH, "800px");
		String height = getTemplateParameter(templateParams, DIALOG_HEIGHT, "400px");
		
		setHeight(height);
		setWidth(width);
		configDialog.setWidth("100%");

		configDialog.setHeight("100%");

		mainLayout.addComponent(configDialog);

		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setSpacing(true);
		horizontalLayout.setHeight(40, Unit.PIXELS);

		previewButton = new Button();
		previewButton.setWidth("-1px");
		previewButton.setHeight("-1px");
		previewButton.setCaption("Vorschau");
		previewButton.setImmediate(true);
		if (usePreview) {
			horizontalLayout.addComponent(previewButton);
		}
		htmlPreviewButton = new Button();
		htmlPreviewButton.setWidth("-1px");
		htmlPreviewButton.setHeight("-1px");
		htmlPreviewButton.setCaption("HTML Vorschau");
		htmlPreviewButton.setImmediate(true);
		horizontalLayout.addComponent(htmlPreviewButton);

		/*
		pdfLink = new Link();
		horizontalLayout.addComponent(pdfLink);

		csvLink = new Link();
		horizontalLayout.addComponent(csvLink);

		xlsLink = new Link();
		horizontalLayout.addComponent(xlsLink);
		 */

		csvButton = new Button();
		csvButton.setWidth("-1px");
		csvButton.setHeight("-1px");
		csvButton.setCaption("CSV");
		csvButton.setImmediate(true);
		horizontalLayout.addComponent(csvButton);

		xlsButton = new Button();
		xlsButton.setWidth("-1px");
		xlsButton.setHeight("-1px");
		xlsButton.setCaption("XLS");
		xlsButton.setImmediate(true);
		horizontalLayout.addComponent(xlsButton);

		pdfButton = new Button();
		pdfButton.setWidth("-1px");
		pdfButton.setHeight("-1px");
		pdfButton.setCaption("PDF");
		pdfButton.setImmediate(true);
		horizontalLayout.addComponent(pdfButton);

		mainLayout.addComponent(horizontalLayout);
		
		return mainLayout;
	}

	private String getTemplateParameter(List<TemplateParameter> templateParams,
			String name, String defaultValue) {
		for (TemplateParameter templateParameter : templateParams) {
			if (StringUtils.equals(templateParameter.getName(), name)) {
				return templateParameter.getValue();
			}
		}
		return defaultValue;
	}

	public void paramsChanged() {
		if (GuiTemplateHelper.isComplete(template, params)) {
			if (pdfFileDownloader != null) {
				pdfButton.removeExtension(pdfFileDownloader);
				pdfFileDownloader = null;
			}
			StreamResource pdfSource = createPDFStream();
			pdfFileDownloader = new FileDownloader(pdfSource);
			pdfFileDownloader.extend(pdfButton);
			pdfButton.setEnabled(true);

			if (csvFileDownloader != null) {
				csvButton.removeExtension(csvFileDownloader);
				csvFileDownloader = null;
			}
			StreamResource csvSource = createCSVStream();
			csvFileDownloader = new FileDownloader(csvSource);
			csvFileDownloader.extend(csvButton);
			csvButton.setEnabled(true);
			if (template.hasPart("xls")) {
				if (xlsFileDownloader != null) {
					xlsButton.removeExtension(xlsFileDownloader);
					xlsFileDownloader = null;
				}
				StreamResource xlsSource = createXLSStream();
				xlsFileDownloader = new FileDownloader(xlsSource);
				xlsFileDownloader.extend(xlsButton);
				xlsButton.setEnabled(true);
			}
		} else {
			//pdfLink.setEnabled(false);
			pdfButton.setEnabled(false);
			//csvLink.setEnabled(false);
			csvButton.setEnabled(false);
			//xlsLink.setEnabled(false);
			xlsButton.setEnabled(false);
		}
	}

	@Override
	public void save() {
	}

	public boolean isUsePreview() {
		return usePreview;
	}

	public void setUsePreview(boolean usePreview) {
		this.usePreview = usePreview;
	}

}
