
package org.mgnl.nicki.editor.projects.members;

/*-
 * #%L
 * nicki-editor-projects
 * %%
 * Copyright (C) 2017 Ralf Hirning
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import org.mgnl.nicki.editor.projects.objects.Directory;
import org.mgnl.nicki.editor.projects.objects.Member;
import org.mgnl.nicki.editor.projects.objects.Member.RIGHT;

import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.radiobutton.RadioButtonGroup;
import com.vaadin.flow.data.renderer.TextRenderer;


@SuppressWarnings("serial")
public class DirectoryComponent extends VerticalLayout {
	
	private HorizontalLayout horizontalLayout_1;
	
	private RadioButtonGroup<Member.RIGHT> rights;
	
	private Label directoryLabel;

	private Directory directory;
	private Member member;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DirectoryComponent(Member target, Directory dir) {
		this.member = target;
		this.directory = dir;
		buildMainLayout();
		
		directoryLabel.setText(this.directory.getDisplayName());
		rights.setItems(RIGHT.values());
		rights.setRenderer(new TextRenderer<>(RIGHT::name));
		
		if (member.hasReadRight(directory)) {
			rights.setValue(Member.RIGHT.READ);
		} else if (member.hasWriteRight(directory)) {
				rights.setValue(Member.RIGHT.WRITE);
		} else {
			rights.setValue(Member.RIGHT.NONE);
		}
		// TODO: setStyleName
		//rights.setStyleName("horizontal");
	}

	public void save() {
		member.setRight(directory, (RIGHT) rights.getValue());
	}

	
	private void buildMainLayout() {
		setWidth("100%");
		setHeight("-1px");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		add(horizontalLayout_1);
	}

	
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("100.0%");
		horizontalLayout_1.setMargin(false);
		
		// directoryLabel
		directoryLabel = new Label();
		directoryLabel.setWidth("200px");
		directoryLabel.setHeight("-1px");
		directoryLabel.setText("Verzeichnis");
		horizontalLayout_1.add(directoryLabel);
		
		// rights
		rights = new RadioButtonGroup<Member.RIGHT>();
		horizontalLayout_1.add(rights);
		
		return horizontalLayout_1;
	}

}
